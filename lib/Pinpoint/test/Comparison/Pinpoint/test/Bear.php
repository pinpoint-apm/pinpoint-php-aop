<?php

namespace Pinpoint\test;

/**
 * I'm the placeholder
 */
class Bear
{
    public function __construct($a, $b, $c)
    {
    }
    public $pdo;
    /**
     * @output @output I'm annotation
     * @parameter: 
     * @return
     */
    public function __pinpoint__output(string $_1, int $_2, array $_3)
    {
        return 1010;
    }
    public function __pinpoint__noreturn(string $_1, int $_2)
    {
        $this->output('1', 3, [4]);
    }
    /**
     * $joinClass->addClassNameAlias('PDO', \Pinpoint\Plugins\Sys\PDO\PDO::class);
     */
    public function pdoNamespaceAlias($driver_options = NULL)
    {
        $this->pdo = new \Pinpoint\Plugins\Sys\PDO\PDO('sqlite:/tmp/foo.db', 'user', 'pass', $driver_options);
    }
    /**
     * $joinClass->addFunctionAlias('curl_init', 'Pinpoint\Plugins\Sys\curl\curl_init');
     */
    public function curlAlias($host = "www.example.com")
    {
        $ch = \Pinpoint\Plugins\Sys\curl\curl_init();
        \Pinpoint\Plugins\Sys\curl\curl_setopt($ch, CURLOPT_URL, $host);
        \Pinpoint\Plugins\Sys\curl\curl_setopt($ch, CURLOPT_HEADER, TRUE);
        \Pinpoint\Plugins\Sys\curl\curl_setopt($ch, CURLOPT_NOBODY, TRUE);
        // remove body
        \Pinpoint\Plugins\Sys\curl\curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
        $head = \Pinpoint\Plugins\Sys\curl\curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        \Pinpoint\Plugins\Sys\curl\curl_close($ch);
    }
    public function callInternal()
    {
        $this->checkProtected();
        $this->checkPrivate();
    }
    /**
     * test protected function
     */
    protected function __pinpoint__checkProtected()
    {
        return __METHOD__;
    }
    /**
     * test private function
     */
    private function __pinpoint__checkPrivate()
    {
        $this->checkProtected();
        return __METHOD__;
    }
    public static function staticFuncFoo(string $_1, int $_2, array $_3)
    {
    }
    public static function callstaticFuncFoo(string $_1, int $_2, array $_3)
    {
        self::staticFuncFoo("1", 2, [3]);
    }
    /*
    * output auto-generated by pinpoint-apm/pinpoint-php-aop
    */
    public function output(string $_1, int $_2, array $_3)
    {
        $_pinpoint_output_var = new \Pinpoint\test\OutputMonitor(__METHOD__, $this, $_1, $_2, $_3);
        $_pinpoint_output_ret = null;
        try {
            $_pinpoint_output_var->onBefore();
            $_pinpoint_output_ret = $this->__pinpoint__output($_1, $_2, $_3);
            $_pinpoint_output_var->onEnd($_pinpoint_output_ret);
            return $_pinpoint_output_ret;
        } catch (\Exception $e) {
            $_pinpoint_output_var->onException($e);
            throw $e;
        }
    }
    /*
    * noreturn auto-generated by pinpoint-apm/pinpoint-php-aop
    */
    public function noreturn(string $_1, int $_2)
    {
        $_pinpoint_noreturn_var = new \Pinpoint\test\OutputMonitorNoReturn(__METHOD__, $this, $_1, $_2);
        $_pinpoint_noreturn_ret = null;
        try {
            $_pinpoint_noreturn_var->onBefore();
            $this->__pinpoint__noreturn($_1, $_2);
            $_pinpoint_noreturn_var->onEnd($_pinpoint_noreturn_ret);
        } catch (\Exception $e) {
            $_pinpoint_noreturn_var->onException($e);
            throw $e;
        }
    }
    /*
    * checkProtected auto-generated by pinpoint-apm/pinpoint-php-aop
    */
    protected function checkProtected()
    {
        $_pinpoint_checkProtected_var = new \Pinpoint\test\OutputMonitor(__METHOD__, $this);
        $_pinpoint_checkProtected_ret = null;
        try {
            $_pinpoint_checkProtected_var->onBefore();
            $_pinpoint_checkProtected_ret = $this->__pinpoint__checkProtected();
            $_pinpoint_checkProtected_var->onEnd($_pinpoint_checkProtected_ret);
            return $_pinpoint_checkProtected_ret;
        } catch (\Exception $e) {
            $_pinpoint_checkProtected_var->onException($e);
            throw $e;
        }
    }
    /*
    * checkPrivate auto-generated by pinpoint-apm/pinpoint-php-aop
    */
    private function checkPrivate()
    {
        $_pinpoint_checkPrivate_var = new \Pinpoint\test\OutputMonitor(__METHOD__, $this);
        $_pinpoint_checkPrivate_ret = null;
        try {
            $_pinpoint_checkPrivate_var->onBefore();
            $_pinpoint_checkPrivate_ret = $this->__pinpoint__checkPrivate();
            $_pinpoint_checkPrivate_var->onEnd($_pinpoint_checkPrivate_ret);
            return $_pinpoint_checkPrivate_ret;
        } catch (\Exception $e) {
            $_pinpoint_checkPrivate_var->onException($e);
            throw $e;
        }
    }
}